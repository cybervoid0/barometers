generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Image {
  id            String         @id @default(uuid())
  url           String
  blurData      String
  description   String?
  name          String?
  order         Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  categories    Category[]     @relation("CategoryImages")
  barometers    Barometer[]    @relation("BarometerImages")
  manufacturers Manufacturer[] @relation("ManufacturerImages")
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  description String
  label       String
  order       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  barometers  Barometer[]
  images      Image[]     @relation("CategoryImages")
}

/// Movement type
model SubCategory {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  barometers  Barometer[]
}

model Barometer {
  /// Table ID
  id              String   @id @default(uuid())
  /// Collection internal ID
  collectionId    String   @unique
  /// Serial number written on the barometer
  serial          String?
  /// Barometer descriptive name
  name            String   @unique
  /// URL Representation of the name
  slug            String   @unique
  /// History of the barometer. May contain Markdown layout
  description     String
  /// Barometer dimensions, e.g. weight, length, diameter etc.
  dimensions      Json?
  /// Date for barometers sorting
  date            DateTime
  /// Date to display on pages, e.g. "c.1870", "mid 19th century"
  dateDescription String
  /// History of ownership and origin of the barometer
  provenance      String?
  /// Estimated price
  estimatedPrice  Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // table relations
  conditionId    String
  manufacturerId String
  categoryId     String
  subCategoryId  Int?
  subCategory    SubCategory?       @relation(fields: [subCategoryId], references: [id])
  category       Category           @relation(fields: [categoryId], references: [id])
  condition      Condition          @relation(fields: [conditionId], references: [id])
  manufacturer   Manufacturer       @relation(fields: [manufacturerId], references: [id])
  images         Image[]            @relation("BarometerImages")
  reports        InaccuracyReport[]
  materials      Material[]         @relation("BarometerMaterials")
}

model Material {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  barometers  Barometer[] @relation("BarometerMaterials")
}

model InaccuracyReport {
  id            String                 @id @default(uuid())
  barometerId   String
  barometer     Barometer              @relation(fields: [barometerId], references: [id])
  reporterName  String
  reporterEmail String
  description   String
  status        InaccuracyReportStatus @default(PENDING)
  createdAt     DateTime               @default(now())
}

enum InaccuracyReportStatus {
  PENDING
  REVIEWED
  RESOLVED
}

model Manufacturer {
  id           String         @id @default(uuid())
  firstName    String?
  name         String         @unique
  slug         String         @unique
  countries    Country[]      @relation("ManufacturerCountries")
  city         String?
  description  String?
  url          String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  barometers   Barometer[]
  images       Image[]        @relation("ManufacturerImages")
  // self-referencing relations
  // some brands may have multiple successors and/or predecessors
  successors   Manufacturer[] @relation("ManufacturerSuccessors")
  predecessors Manufacturer[] @relation("ManufacturerSuccessors")
}

model Country {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  code          String?
  manufacturers Manufacturer[] @relation("ManufacturerCountries")
}

model Condition {
  id          String      @id @default(uuid())
  name        String
  value       Int
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  barometers  Barometer[]
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String?
  name      String
  role      AccessRole
  avatarURL String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum AccessRole {
  USER
  OWNER
  ADMIN
}
