generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id            String         @id @default(uuid())
  url           String
  description   String?
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  order         Int?
  blurData      String
  barometers    Barometer[]    @relation("BarometerImages")
  categories    Category[]     @relation("CategoryImages")
  manufacturers Manufacturer[] @relation("ManufacturerImages")
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  description String
  label       String
  order       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  barometers  Barometer[]
  images      Image[]     @relation("CategoryImages")
}

/// Movement type
model SubCategory {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  barometers  Barometer[]
}

model Barometer {
  /// Table ID
  id              String             @id @default(uuid())
  /// Collection internal ID
  collectionId    String             @unique
  /// Barometer descriptive name
  name            String             @unique
  /// URL Representation of the name
  slug            String             @unique
  /// History of the barometer. May contain Markdown layout
  description     String
  conditionId     String
  /// Date for barometers sorting
  date            DateTime
  /// Date to display on pages, e.g. "c.1870", "mid 19th century"
  dateDescription String
  manufacturerId  String
  /// Barometer dimensions, e.g. weight, length, diameter etc.
  dimensions      Json?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  categoryId      String
  /// Serial number written on the barometer
  serial          String?
  /// History of ownership and origin of the barometer
  provenance      String?
  subCategoryId   Int?
  /// Estimated price
  estimatedPrice  Float?
  category        Category           @relation(fields: [categoryId], references: [id])
  condition       Condition          @relation(fields: [conditionId], references: [id])
  manufacturer    Manufacturer       @relation(fields: [manufacturerId], references: [id])
  subCategory     SubCategory?       @relation(fields: [subCategoryId], references: [id])
  reports         InaccuracyReport[]
  images          Image[]            @relation("BarometerImages")
  materials       Material[]         @relation("BarometerMaterials")
}

model Material {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  barometers  Barometer[] @relation("BarometerMaterials")
}

model InaccuracyReport {
  id            String                 @id @default(uuid())
  barometerId   String
  reporterEmail String
  description   String
  status        InaccuracyReportStatus @default(PENDING)
  createdAt     DateTime               @default(now())
  reporterName  String
  barometer     Barometer              @relation(fields: [barometerId], references: [id])
}

model Manufacturer {
  id             String         @id @default(uuid())
  name           String         @unique
  city           String?
  description    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  slug           String         @unique
  firstName      String?
  url            String?
  barometers     Barometer[]
  countries      Country[]      @relation("ManufacturerCountries")
  images         Image[]        @relation("ManufacturerImages")
  Manufacturer_A Manufacturer[] @relation("ManufacturerSuccessors")
  Manufacturer_B Manufacturer[] @relation("ManufacturerSuccessors")
}

model Country {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  code          String?
  manufacturers Manufacturer[] @relation("ManufacturerCountries")
}

model Condition {
  id          String      @id @default(uuid())
  name        String
  value       Int
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  barometers  Barometer[]
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String?
  name      String
  role      AccessRole
  avatarURL String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum InaccuracyReportStatus {
  PENDING
  REVIEWED
  RESOLVED
}

enum AccessRole {
  USER
  OWNER
  ADMIN
}
